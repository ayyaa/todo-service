// Code generated by MockGen. DO NOT EDIT.
// Source: services/interfaces.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/ayyaa/todo-services/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockServiceInterface) CreateList(ctx context.Context, todo *models.AdditionalRequest) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, todo)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockServiceInterfaceMockRecorder) CreateList(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockServiceInterface)(nil).CreateList), ctx, todo)
}

// DeleteList mocks base method.
func (m *MockServiceInterface) DeleteList(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockServiceInterfaceMockRecorder) DeleteList(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockServiceInterface)(nil).DeleteList), ctx, id)
}

// DeleteSubList mocks base method.
func (m *MockServiceInterface) DeleteSubList(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubList", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubList indicates an expected call of DeleteSubList.
func (mr *MockServiceInterfaceMockRecorder) DeleteSubList(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubList", reflect.TypeOf((*MockServiceInterface)(nil).DeleteSubList), ctx, id)
}

// EditList mocks base method.
func (m *MockServiceInterface) EditList(ctx context.Context, list *models.AdditionalRequestEdit, id uint) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditList", ctx, list, id)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditList indicates an expected call of EditList.
func (mr *MockServiceInterfaceMockRecorder) EditList(ctx, list, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditList", reflect.TypeOf((*MockServiceInterface)(nil).EditList), ctx, list, id)
}

// EditSubList mocks base method.
func (m *MockServiceInterface) EditSubList(ctx context.Context, list *models.AdditionalRequestEdit, id uint) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditSubList", ctx, list, id)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditSubList indicates an expected call of EditSubList.
func (mr *MockServiceInterfaceMockRecorder) EditSubList(ctx, list, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditSubList", reflect.TypeOf((*MockServiceInterface)(nil).EditSubList), ctx, list, id)
}

// GetListByID mocks base method.
func (m *MockServiceInterface) GetListByID(ctx context.Context, id uint) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByID", ctx, id)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByID indicates an expected call of GetListByID.
func (mr *MockServiceInterfaceMockRecorder) GetListByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByID", reflect.TypeOf((*MockServiceInterface)(nil).GetListByID), ctx, id)
}

// GetLists mocks base method.
func (m *MockServiceInterface) GetLists(ctx context.Context, queryParam models.ParamRequest) (*models.ListPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLists", ctx, queryParam)
	ret0, _ := ret[0].(*models.ListPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLists indicates an expected call of GetLists.
func (mr *MockServiceInterfaceMockRecorder) GetLists(ctx, queryParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLists", reflect.TypeOf((*MockServiceInterface)(nil).GetLists), ctx, queryParam)
}

// GetSubListByID mocks base method.
func (m *MockServiceInterface) GetSubListByID(ctx context.Context, id uint) (*models.SubList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubListByID", ctx, id)
	ret0, _ := ret[0].(*models.SubList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubListByID indicates an expected call of GetSubListByID.
func (mr *MockServiceInterfaceMockRecorder) GetSubListByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubListByID", reflect.TypeOf((*MockServiceInterface)(nil).GetSubListByID), ctx, id)
}

// GetSubLists mocks base method.
func (m *MockServiceInterface) GetSubLists(ctx context.Context, queryParam models.ParamRequest) (*models.ListPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubLists", ctx, queryParam)
	ret0, _ := ret[0].(*models.ListPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubLists indicates an expected call of GetSubLists.
func (mr *MockServiceInterfaceMockRecorder) GetSubLists(ctx, queryParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubLists", reflect.TypeOf((*MockServiceInterface)(nil).GetSubLists), ctx, queryParam)
}
